<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Put your back pain on ice.</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap" rel="stylesheet">
    <style>
      body {
        font-family: 'Inter', sans-serif;
        margin: 0;
        padding: 0;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: #fff;
        line-height: 1.6;
        min-height: 100vh;
      }
      header, section, footer {
        padding: 4rem 2rem;
        max-width: 800px;
        margin: 0 auto;
        text-align: center;
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        margin-bottom: 2rem;
        border: 1px solid rgba(255, 255, 255, 0.2);
      }
      h1 {
        font-size: 2.5rem;
        margin-bottom: 1rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
      }
      h2 {
        font-size: 1.75rem;
        margin-top: 3rem;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.3);
      }
      .cta-button {
        display: inline-block;
        background: linear-gradient(45deg, #ff6b6b, #ee5a24);
        color: white;
        padding: 1rem 2rem;
        border-radius: 50px;
        text-decoration: none;
        font-weight: 600;
        transition: all 0.3s ease;
        margin-top: 1rem;
        box-shadow: 0 4px 15px rgba(238, 90, 36, 0.4);
        text-shadow: none;
      }
      .cta-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(238, 90, 36, 0.6);
      }
      ul {
        list-style: none;
        padding: 0;
        text-align: left;
      }
      li {
        margin: 1rem 0;
        background: rgba(255, 255, 255, 0.1);
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #ff6b6b;
      }
      table {
        width: 100%;
        margin-top: 2rem;
        border-collapse: collapse;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 10px;
        overflow: hidden;
      }
      td, th {
        padding: 1rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        text-align: left;
      }
      th {
        background: rgba(255, 255, 255, 0.2);
        font-weight: 600;
      }
      #snow {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: 1;
        overflow: hidden;
      }
      .snowflake {
        position: absolute;
        top: -2em;
        color: rgba(255, 255, 255, 0.8);
        font-size: 1.5rem;
        user-select: none;
        animation: fall linear infinite;
        text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
        will-change: transform;
        /* Debug border to see snowflake bounds */
        /* border: 1px solid red; */
      }
      
      /* Simpler animation without custom properties for testing */
      @keyframes fall {
        0% {
          transform: translateY(-100px) rotate(0deg);
        }
        25% {
          transform: translateY(25vh) translateX(-50px) rotate(90deg);
        }
        50% {
          transform: translateY(50vh) translateX(50px) rotate(180deg);
        }
        75% {
          transform: translateY(75vh) translateX(-25px) rotate(270deg);
        }
        100% {
          transform: translateY(100vh) translateX(25px) rotate(360deg);
        }
      }
      
      /* Alternative animation using CSS custom properties */
      @keyframes fallWithDrift {
        0% {
          transform: translateY(-100px) translateX(0px) rotate(0deg);
        }
        50% {
          transform: translateY(50vh) translateX(var(--drift, 0px)) rotate(180deg);
        }
        100% {
          transform: translateY(100vh) translateX(calc(var(--drift, 0px) * 2)) rotate(360deg);
        }
      }
      .content-wrapper {
        position: relative;
        z-index: 2;
        padding: 2rem 0;
      }
    </style>
  </head>
  <body>
    <div id="snow"></div>

    <div class="content-wrapper">
      <header>
        <h1>Put your back pain on ice.</h1>
        <p>The world's first cold therapy foam roller ‚Äî designed to freeze inflammation and restore mobility.</p>
        <a class="cta-button" href="https://www.kickstarter.com" target="_blank">Back us on Kickstarter</a>
      </header>

      <section>
        <h2>The Problem</h2>
        <p>Traditional foam rollers warm up after minutes. Ice packs slide off. You need pressure <strong>and</strong> cold ‚Äî and you need it to last.</p>
      </section>

      <section>
        <h2>Meet Backblizzard</h2>
        <p>A purpose-built foam roller with a freezable cold core and a firm-yet-comfortable surface.</p>
        <ul>
          <li>‚ùÑÔ∏è Holds cold for 30+ minutes</li>
          <li>üßò Full-spine width, perfect for laying flat</li>
          <li>üí™ Durable, non-slip exterior</li>
        </ul>
      </section>

      <section>
        <h2>Why It Works</h2>
        <table>
          <tr><th>Feature</th><th>Why It Matters</th></tr>
          <tr><td>Freezable core</td><td>Targets inflammation deeply</td></tr>
          <tr><td>High-density shell</td><td>Supports deep muscle release</td></tr>
          <tr><td>Ergonomic design</td><td>Aligns with your spine</td></tr>
          <tr><td>Cold therapy anywhere</td><td>No plugs, no mess</td></tr>
        </table>
      </section>

      <section>
        <h2>Early Backer Rewards</h2>
        <ul>
          <li>üöÄ Founders-only pricing</li>
          <li>üéÅ Bonus recovery content</li>
          <li>üì¢ Your feedback shapes the final design</li>
        </ul>
      </section>

      <section>
        <h2>Freeze your pain, not your progress.</h2>
        <a class="cta-button" href="https://www.kickstarter.com" target="_blank">Back us on Kickstarter</a>
      </section>

      <footer>
        <p>Made with ‚ùÑÔ∏è by Backblizzard</p>
      </footer>
    </div>

    <script>
      (function() {
        console.log('Snow script loaded');
        
        function initSnow() {
          console.log('initSnow called, readyState:', document.readyState);
          
          const snowContainer = document.getElementById("snow");
          if (!snowContainer) {
            console.log("Snow container not found");
            return;
          }
          
          console.log("Snow container found, initializing snow effect");
          const snowflakes = ["‚ùÑÔ∏è", "‚ùÖ", "‚ùÜ", "üå®Ô∏è"];
          let snowflakeCount = 0;

          function createSnowflake() {
            snowflakeCount++;
            console.log('Creating snowflake #' + snowflakeCount);
            
            const flake = document.createElement("div");
            flake.className = "snowflake";
            flake.textContent = snowflakes[Math.floor(Math.random() * snowflakes.length)];

            // Random starting position across the full width
            const leftPos = Math.random() * 100;
            flake.style.left = leftPos + "%";

            // Random horizontal drift - make it more pronounced
            const drift = (Math.random() - 0.5) * 300;
            flake.style.setProperty('--drift', drift + 'px');
            
            // Random animation duration
            const duration = 8 + Math.random() * 12;
            flake.style.animationDuration = duration + "s";
            
            // Random size
            const size = 0.8 + Math.random() * 1.2;
            flake.style.fontSize = size + "rem";
            
            // Random opacity for depth
            flake.style.opacity = (0.3 + Math.random() * 0.7).toString();

            // Add slight delay to animation start
            flake.style.animationDelay = (Math.random() * 2) + "s";

            if (snowContainer) {
              snowContainer.appendChild(flake);
            }
            
            setTimeout(function() {
              if (flake && flake.parentNode) {
                flake.remove();
              }
            }, (duration + 2) * 1000); // Clean up based on actual duration
          }

          // Create initial burst
          for (let i = 0; i < 5; i++) {
            setTimeout(function() {
              createSnowflake();
            }, i * 500);
          }

          // Continue creating snowflakes
          const snowInterval = setInterval(createSnowflake, 800);
          console.log('Snow interval started');
          
          // Store interval for cleanup if needed
          window.snowInterval = snowInterval;
        }

        // Try immediate execution
        if (document.readyState === 'complete' || document.readyState === 'interactive') {
          console.log('Document already ready, starting snow immediately');
          setTimeout(initSnow, 100);
        } else {
          console.log('Document not ready, waiting for DOMContentLoaded');
          document.addEventListener('DOMContentLoaded', function() {
            console.log('DOMContentLoaded fired');
            setTimeout(initSnow, 100);
          });
        }

        // Additional fallback
        window.addEventListener('load', function() {
          console.log('Window load fired');
          if (!window.snowInterval) {
            setTimeout(initSnow, 100);
          }
        });
      })();
    </script>
  </body>
</html>